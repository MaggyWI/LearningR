---
title: "Reproducible documents"
author: "Ingrid M. Wagnon"
format: html
---


## About me

-   Ingrid M. Wagnon
-   Roskilde University

I have a **PhD in Neurosciences**. I currently work as a post-doc on a project about *food-derived miRNA*.

## Simple Code

```{r Simple Multiplication}
3 * 3
```

## About Git

Click on the Git app -\> Commit -\> Stage the file that you want to commit and then the first commit entry could be "Initial Commit" -\> Click "Commit"

### Testing Git

Try to commit

## Setup Code Chunk

When you insert a code chunk "{r}" appears. You can add a name next to it (with a space) and it will label/name your code chunk.

```{r setup}
#| message: false
#| warning: false
library(tidyverse)
post_meal_data <- read_csv2(here::here("data/post-meal-insulin.csv"))
```

The "here::here" function defines the path of access to the data set as inside the project folder so it is not a "personal" path - Makesit more homogeneous to reuse the project file rather than have the path directory towards somewhere else in your computer.

For the "read_csv2" it is because the data are separated by semicolons instead of coma.

"#|" is a chunk option for what you want to see in the final output documents (the html or docx or pdf). Here #| message and #| warning were added at the beggining of the code chunk.

Other common options are:

-   "include": Whether to include all the code, code output, messages, and warnings in the rendered output document. Default is true. Use false to hide everything but still run the code.

-   "echo": To show the code. Default value is true. Use false to hide.

-   results: To show the output. Default is markup. Use hide to hide or asis as regular text (not inside a code block). - "eval": To evaluate (run) the R code in the chunk. Default value is true, while false does not run the code.

If you want to set an option to all the code chunks (e.g. to hide all the code but keep the output), you can use Quartoâ€™s execute options. These options are added to the YAML header and will apply the settings to everything in the document.

*"execute:*

*echo : false*

*warning : false*

*message : false"*


## Showing the Data

You can use Tab for autocompletion (giving you the name of items already define so you don't need to type them entirely)

```{r showing_data}
post_meal_data
glimpse(post_meal_data)
```


## Plot One Continuous Variable

Like many functions in R, especially the summary statistic functions like mean(), you can set the argument **na.rm = TRUE** in the geom_histogram() function, as well as in other geom_* functions.

```{r BMI_histogram}
#| fig-cap: "Distribution of BMI."
#| label: fig-bmi-histo
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```


## Exercise : Discrete Plot

```{r discrete_plot}
#| fig-cap: "Group Distribution."
#| label: fig-group-barplot
ggplot(post_meal_data, aes(x = Group)) +
  geom_bar()
```

See @fig-group-barplot above for a cool plot!


## Exercise : Plotting Two Discrete variables

Below "as.character" defines glykemi as character istead of a number otherwise it can't work

```{r two_discrete_variables}
post_meal_data |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar(position = position_dodge())
```


```{r side-by-side-figs}
#| label: fig-bmi-glycemia
#| fig-cap: "BMI and glycemia, side by side."
#| fig-subcap:
#|   - "Distribution of BMI."
#|   - "Number of those with glycemia."
#| layout-ncol: 2
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()

ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```


## Exercise : Plotting two Continuous Variables

```{r}
#| fig-cap: "Scatterplot of BMI and the area under the curve for glucose."
#| label: fig-bmi-auc-pg
ggplot(post_meal_data, aes(x = BMI, y = auc_pg)) +
  geom_point() +
  geom_smooth()
```


## Pushing changes to remote













